@using Oqtane.Modules.Controls
@using TKA.Posts.Services
@using TKA.Posts.Models

@namespace TKA.Posts
@inherits ModuleBase
@inject IPostsService PostsService
@inject NavigationManager NavigationManager


<div class="card yowanu">
    <div class="card-body">
        <h5 class="card-title">@_title</h5><br />
        <p>
            <div class="card-text">@_description</div>
        </p>
        <p class="card-title">@_createdon</p>
        <p class="card-title">@_createdby</p>
    </div>
    <div class="comment">
          <textarea placeholder="Leave a comment!" class="pb-cmnt-textarea"></textarea><br/>           
           <button class="btn btn-primary pull-right" type="button">Share</button>                 
    </div>
   </div>
    <br/><br />

<NavLink class="btn btn-danger" href="@NavigateUrl()">Back</NavLink>
<br />
<br />

@code {
   public override List<Resource> Resources => new List<Resource>()
{
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" }
    };

    int _id;
    string _title;
    string _description;
    string _createdby;
    DateTime _createdon;
    string _modifiedby;
    DateTime _modifiedon;
    string _postpublished;
    string _postapproved;
    string _isdeleted;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (PageState.Action == "Details")
            {
                _id = Int32.Parse(PageState.QueryString["id"]);
                Posts Posts = await PostsService.GetPostsAsync(_id, ModuleState.ModuleId);
                if (Posts != null)
                {
                    _title = Posts.Title;
                    _createdby = Posts.CreatedBy;
                    _createdon = Posts.CreatedOn;
                    _modifiedby = Posts.ModifiedBy;
                    _modifiedon = Posts.ModifiedOn;
                    _description = Posts.Description;
                    _postpublished = Posts.PostPublished;
                    _postapproved = Posts.PostApproved;
                    _isdeleted = Posts.IsDeleted;
                }
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Posts {PostsId} {Error}", _id, ex.Message);
            AddModuleMessage("Error Loading Posts", MessageType.Error);
        }
    }

    private async Task Save()
    {
        try
        {
            if (PageState.Action == "Add")
            {
                Posts Posts = new Posts();
                Posts.ModuleId = ModuleState.ModuleId;
                Posts.Title = _title;
                Posts.Description = _description;
                Posts.PostPublished = _postpublished;
                Posts.PostApproved = _postapproved;
                Posts.IsDeleted = _isdeleted;
                Posts = await PostsService.AddPostsAsync(Posts);
                await logger.LogInformation("Posts Added {Posts}", Posts);
            }
            else
            {
                Posts Posts = await PostsService.GetPostsAsync(_id, ModuleState.ModuleId);
                Posts.Title = _title;
                Posts.Description = _description;
                Posts.PostPublished = _postpublished;
                Posts.PostApproved = _postapproved;
                Posts.IsDeleted = _isdeleted;
                await PostsService.UpdatePostsAsync(Posts);
                await logger.LogInformation("Posts Updated {Posts}", Posts);
            }
            NavigationManager.NavigateTo(NavigateUrl());
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Saving Posts {Error}", ex.Message);
            AddModuleMessage("Error Saving Posts", MessageType.Error);
        }
    }
}
